syntax = "proto3";

option java_outer_classname = "StorageGrpcService";

service StorageService {
    rpc GetLimitSectorSize(ContainerId) returns (SectorSize);

    rpc CreateContainer(Hash) returns (CommonMessage);
    rpc DeleteContainer(ContainerId) returns (CommonMessage);


    rpc GetNodeInfo(CommonRpcUrl) returns (NodeInfo);
    rpc GetChildNodeInfos(CommonRpcUrl) returns (NodeList);
    rpc GetChildTrees(CommonRpcUrl) returns (Trees);

    rpc CreateTree(CommonRpcUrl) returns (CommonMessage);
    rpc DeleteTree(CommonRpcUrl) returns (CommonMessage);

    rpc CreateTempNode(NodeInfo) returns (CommonMessage);
    rpc DeleteNode(NodeAccess) returns (CommonMessage);
    rpc LoadWriteNode(NodeAccess) returns (NodeAccessId);
    rpc LoadReadNode(NodeAccess) returns (NodeAccessId);
    rpc CloseWriteNode(NodePoint) returns (CommonMessage);

    rpc WriteSectorArray(NodePoint) returns (WriteMessage);
    rpc ReadSectorArray(NodePoint) returns (ReadMessage);
    

    rpc reEditPermissionToNode(Permission) returns (CommonMessage);
}



message SectorSize {
    int32 byteSize = 1;
}
message ContainerId {
    int64 id = 1;
}
message Hash {
    bytes hash = 1;
}
message CreatePool {
    Hash hash = 1;
    SectorSize size = 2;
}
message AccessKey {
    ContainerId id = 1;
    Hash hash = 2;
}

message CommonRpcUrl {
    ContainerId id = 1;
    string path = 2;
}

message Offset {
    int64 offsetCount = 1;
    int64 start = 2;
    int64 end = 3;
}

message Trees {
    string path = 1;
}

message NodeAccess {
    AccessKey id = 1;
    string path = 2;
}

message NodePoint {
    AccessKey key = 1;
    NodeAccessId nodeId = 2;
    string path = 3;
    Offset offset = 4;
    bytes block = 5;
}


message Permission {
    ContainerId id = 1;
    string path = 2;
    int32 permission = 3;
}

message NodeList {
    repeated NodeInfo nodes = 1;
}


message NodeInfo{
    ContainerId id = 1;

    string fileName =2;
    string path = 3;
    int64 size = 4;
    int32 permission = 5;
    string date = 6;
}

message NodeAccessId {
    uint32 nodeId = 1;
}

message CommonMessage {
    int32 statusCode = 1;
    string message = 2;
}

message WriteMessage {
    CommonMessage message = 1;
    repeated int64 completeOffset = 2;

}

message ReadMessage {
    CommonMessage message = 1;
    Offset offset = 2;
    bytes block = 3;
}